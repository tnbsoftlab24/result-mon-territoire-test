class ImportJob < ApplicationJob
  require 'csv'


  queue_as :default

  # csv_file_path = File.read(Rails.root.join("spec/fixtures/epcicom.csv"), :encoding => 'iso-8859-1')
 
  def perform(csv)


    rows = CSV.read("spec/fixtures/epcicom.csv")
    @csv = CSV.open("spec/fixtures/file-generate-in-utf8-epcicom.csv", 'wb') do |csv|
      rows.each { |row| csv << row }
    end

    # In This file Version all tests pass (5/5) green when converted online in utf-8
    # csv_file_path = File.read(Rails.root.join("spec", "fixtures", "file-convert-online-epcicom.csv"))

    # In This file Version 3/5 tests pass to green when converted generated by csv library in ruby
    csv_file_path = File.read(Rails.root.join("spec", "fixtures", "file-generate-in-utf8-epcicom.csv"))

    csv_intercommunalities = CSV.parse(csv_file_path, col_sep: ';', headers: true,  encoding: "UTF-8")

    intercommunality = nil
    commune = nil
    csv_intercommunalities.each do |row|
      intercommunality = Intercommunality.find_by(siren: row['siren_epci'])
      intercommunality = Intercommunality.create(name: row['nom_complet'], siren: row['siren_epci'], form: row['form_epci'].slice(0, 3).downcase) if intercommunality.nil?
      commune = Commune.find_by(code_insee: row['insee'])
      if commune.present?
        commune.update_columns(intercommunality_id: intercommunality.id )
      else
        Commune.create(name: row['nom_com'], code_insee: row['insee'], population: row['pop_total'], intercommunality_id: intercommunality.id)
      end
      total_population = intercommunality.communes.sum(:population)
      intercommunality.update(population: total_population)
    end
  end
end
